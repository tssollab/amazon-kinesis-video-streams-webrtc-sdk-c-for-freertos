From c293ee0353fff72fa5c220697697092eca287e08 Mon Sep 17 00:00:00 2001
From: Lina Chen <chenln1124@thundersoft.com>
Date: Fri, 17 Mar 2023 05:39:41 +0000
Subject: [PATCH 7/8] Enable build on anyke platform.

---
 CMakeLists.txt                         |  2 ++
 usrsctplib/CMakeLists.txt              |  6 +++-
 usrsctplib/netinet/sctp.h              |  7 ++++
 usrsctplib/netinet/sctp_os_userspace.h |  4 +--
 usrsctplib/netinet/sctp_sha1.h         |  3 ++
 usrsctplib/netinet/sctp_userspace.c    | 50 --------------------------
 usrsctplib/user_atomic.h               | 18 +++++++++-
 usrsctplib/user_malloc.h               |  7 ++++
 usrsctplib/user_recv_thread.c          |  2 +-
 usrsctplib/user_socketvar.h            |  2 +-
 10 files changed, 45 insertions(+), 56 deletions(-)
 mode change 100644 => 100755 CMakeLists.txt
 mode change 100644 => 100755 usrsctplib/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
old mode 100644
new mode 100755
index f04b944..4f757dd
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -45,6 +45,8 @@ include(CheckIncludeFile)
 include(CheckIncludeFiles)
 include(CheckCCompilerFlag)
 
+include_directories(${MBEDTLS_INCLUDE_DIRS})
+
 #################################################
 # CHECK OPTIONS
 #################################################
diff --git a/usrsctplib/CMakeLists.txt b/usrsctplib/CMakeLists.txt
old mode 100644
new mode 100755
index 7f45b47..9fb927c
--- a/usrsctplib/CMakeLists.txt
+++ b/usrsctplib/CMakeLists.txt
@@ -198,6 +198,10 @@ endif ()
 
 if(SCTP_USE_MBEDTLS_SHA1)
 	target_link_libraries(usrsctp PRIVATE ${MBEDTLS_LIBRARIES})
+    if(KVS_PLAT_ANKAI_FREERTOS)
+	set(PLATFORM_LIBRARY_DIRS ${CMAKE_SOURCE_DIR}/../../os)
+	target_link_libraries(usrsctp PRIVATE ${PLATFORM_LIBRARY_DIRS}/libfreertos.a)
+    endif()
 endif()
 
 set_target_properties(usrsctp-static PROPERTIES OUTPUT_NAME "usrsctp")
@@ -214,4 +218,4 @@ endif ()
 #################################################
 
 install(TARGETS usrsctp usrsctp-static DESTINATION ${CMAKE_INSTALL_LIBDIR})
-install(FILES usrsctp.h DESTINATION include)
+#install(FILES usrsctp.h DESTINATION include)
diff --git a/usrsctplib/netinet/sctp.h b/usrsctplib/netinet/sctp.h
index 8d8bf31..b6e81b2 100755
--- a/usrsctplib/netinet/sctp.h
+++ b/usrsctplib/netinet/sctp.h
@@ -54,6 +54,13 @@ __FBSDID("$FreeBSD: head/sys/netinet/sctp.h 356357 2020-01-04 20:33:12Z tuexen $
 #define SCTP_PACKED
 #endif
 
+#if defined(SCTP_USE_RTOS)
+#define SOCK_SEQPACKET 5
+#define MSG_EOR        0x08
+#define SOMAXCONN      128
+#define ENOTSUP        134
+#endif
+
 /*
  * SCTP protocol - RFC4960.
  */
diff --git a/usrsctplib/netinet/sctp_os_userspace.h b/usrsctplib/netinet/sctp_os_userspace.h
index b2a09e1..54ed5f9 100755
--- a/usrsctplib/netinet/sctp_os_userspace.h
+++ b/usrsctplib/netinet/sctp_os_userspace.h
@@ -288,7 +288,7 @@ typedef char* caddr_t;
 
 #else /* !defined(Userspace_os_Windows) */
 #include <sys/socket.h>
-#if defined(__DragonFly__) || defined(__FreeBSD__) || defined(__linux__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__native_client__) || defined(__Fuchsia__)
+#if defined(__DragonFly__) || defined(__FreeBSD__) || defined(__linux__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__native_client__) || defined(__Fuchsia__) || defined(SCTP_USE_RTOS)
 #include <pthread.h>
 #endif
 
@@ -1145,7 +1145,7 @@ sctp_get_mbuf_for_msg(unsigned int space_needed, int want_header, int how, int a
 #define LIST_FOREACH_SAFE LIST_FOREACH_MUTABLE
 #endif
 
-#if defined(__native_client__)
+#if defined(__native_client__) || defined(SCTP_USE_RTOS)
 #define	timercmp(tvp, uvp, cmp)						\
 	(((tvp)->tv_sec == (uvp)->tv_sec) ?				\
 	    ((tvp)->tv_usec cmp (uvp)->tv_usec) :			\
diff --git a/usrsctplib/netinet/sctp_sha1.h b/usrsctplib/netinet/sctp_sha1.h
index 9ff4ff7..58bfe7d 100755
--- a/usrsctplib/netinet/sctp_sha1.h
+++ b/usrsctplib/netinet/sctp_sha1.h
@@ -48,6 +48,9 @@ __FBSDID("$FreeBSD$");
 #include <openssl/sha.h>
 #elif defined(SCTP_USE_MBEDTLS_SHA1)
 #include <mbedtls/sha1.h>
+#ifdef ENABLE_MBEDTLS_V3
+#include <mbedtls/compat-2.x.h>
+#endif
 #endif
 
 struct sctp_sha1_context {
diff --git a/usrsctplib/netinet/sctp_userspace.c b/usrsctplib/netinet/sctp_userspace.c
index 2b4a533..8a37787 100755
--- a/usrsctplib/netinet/sctp_userspace.c
+++ b/usrsctplib/netinet/sctp_userspace.c
@@ -39,7 +39,6 @@
 
 #if defined(SCTP_USE_RTOS)
 #include <netinet/sctp_pcb.h>
-#include "esp_pthread.h"
 #endif
 #include <netinet/sctp_os_userspace.h>
 #if defined(__FreeBSD__)
@@ -80,55 +79,6 @@ sctp_userspace_thread_create(userland_thread_t *thread, start_routine_t start_ro
 #pragma GCC diagnostic pop
 #endif
 
-#elif defined(SCTP_USE_RTOS)
-#include "esp_pthread.h"
-
-int
-sctp_userspace_thread_create(userland_thread_t *thread, start_routine_t start_routine, const char* thread_name, uint32_t thread_size)
-{
-    esp_pthread_cfg_t pthread_cfg;
-    esp_err_t esp_err = esp_pthread_get_cfg(&pthread_cfg);
-    pthread_attr_t *pAttr = NULL;
-    pthread_attr_t attr;
-    pAttr = &attr;
-	int result = 0;
-
-    result = pthread_attr_init(pAttr);
-	extern struct sctp_base_info system_base_info;
-    if(esp_err != ESP_OK){
-        SCTPDBG(SCTP_DEBUG_USR, "get the esp pthread cfg failed.\n");
-		//SCTP_PRINTF("get the esp pthread cfg failed.\n");
-		return esp_err;
-    }
-
-    if(thread_size == 0){
-        pthread_cfg.stack_size = SCTP_THREAD_DEFAULT_SIZE;
-    }else{
-        pthread_cfg.stack_size = thread_size;
-    }
-
-    if(thread_name == NULL){
-        pthread_cfg.thread_name = SCTP_THREAD_DEFAULT_NAME;
-    }else{
-        pthread_cfg.thread_name = thread_name;
-    }
-
-    esp_err = esp_pthread_set_cfg(&pthread_cfg);
-
-    if(esp_err != ESP_OK){
-		SCTPDBG(SCTP_DEBUG_USR, "set the esp pthread cfg failed.\n");
-		//SCTP_PRINTF("set the esp pthread cfg failed.\n");
-		return esp_err;
-    }
-
-    if(thread_size == 0){
-        pthread_attr_setstacksize(pAttr, SCTP_THREAD_DEFAULT_SIZE);
-    }else{
-        pthread_attr_setstacksize(pAttr, thread_size);
-    }
-
-	return pthread_create(thread, pAttr, start_routine, NULL);
-}
 #else
 int
 sctp_userspace_thread_create(userland_thread_t *thread, start_routine_t start_routine, const char* thread_name, uint32_t thread_size)
diff --git a/usrsctplib/user_atomic.h b/usrsctplib/user_atomic.h
index 6a59587..ac5ada8 100755
--- a/usrsctplib/user_atomic.h
+++ b/usrsctplib/user_atomic.h
@@ -90,17 +90,30 @@ static inline void atomic_init(void) {} /* empty when we are not using atomic_mt
    compile with -march=i486
  */
 
+
 /*Atomically add V to *P.*/
+#if defined(KVS_PLAT_ANKAI_FREERTOS)
+#define atomic_add_int(P, V)	 (void) __atomic_fetch_add(P, V, __ATOMIC_SEQ_CST)
+#else
 #define atomic_add_int(P, V)	 (void) __sync_fetch_and_add(P, V)
+#endif
 
 /*Atomically subtrace V from *P.*/
+#if defined(KVS_PLAT_ANKAI_FREERTOS)
+#define atomic_subtract_int(P, V)	 (void) __atomic_fetch_sub(P, V, __ATOMIC_SEQ_CST)
+#else
 #define atomic_subtract_int(P, V) (void) __sync_fetch_and_sub(P, V)
+#endif
 
 /*
  * Atomically add the value of v to the integer pointed to by p and return
  * the previous value of *p.
  */
+#if defined(KVS_PLAT_ANKAI_FREERTOS)
+#define atomic_fetchadd_int(p, v) __atomic_fetch_add(p, v,  __ATOMIC_SEQ_CST)
+#else
 #define atomic_fetchadd_int(p, v) __sync_fetch_and_add(p, v)
+#endif
 
 /* Following explanation from src/sys/i386/include/atomic.h,
  * for atomic compare and set
@@ -109,8 +122,11 @@ static inline void atomic_init(void) {} /* empty when we are not using atomic_mt
  *
  * Returns 0 on failure, non-zero on success
  */
-
+#if defined(KVS_PLAT_ANKAI_FREERTOS)
+#define atomic_cmpset_int(dst, exp, src) __atomic_exchange_n(dst, src, __ATOMIC_SEQ_CST)
+#else
 #define atomic_cmpset_int(dst, exp, src) __sync_bool_compare_and_swap(dst, exp, src)
+#endif
 
 #define SCTP_DECREMENT_AND_CHECK_REFCOUNT(addr) (atomic_fetchadd_int(addr, -1) == 1)
 #if defined(INVARIANTS)
diff --git a/usrsctplib/user_malloc.h b/usrsctplib/user_malloc.h
index 1612452..830be36 100755
--- a/usrsctplib/user_malloc.h
+++ b/usrsctplib/user_malloc.h
@@ -54,6 +54,13 @@
 
 #define	MINALLOCSIZE	UMA_SMALLEST_UNIT
 
+#ifdef SCTP_USE_RTOS
+typedef unsigned char   u_char;
+typedef unsigned short  u_short;
+typedef unsigned int    u_int;
+typedef unsigned long   u_long;
+#endif
+
 /*
  * flags to malloc.
  */
diff --git a/usrsctplib/user_recv_thread.c b/usrsctplib/user_recv_thread.c
index 1a72948..02ff058 100755
--- a/usrsctplib/user_recv_thread.c
+++ b/usrsctplib/user_recv_thread.c
@@ -35,7 +35,7 @@
 #include <netinet/in.h>
 #include <unistd.h>
 #include <pthread.h>
-#if !defined(__DragonFly__) && !defined(__FreeBSD__) && !defined(__NetBSD__)
+#if !defined(__DragonFly__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(SCTP_USE_RTOS)
 #include <sys/uio.h>
 #else
 #include <user_ip6_var.h>
diff --git a/usrsctplib/user_socketvar.h b/usrsctplib/user_socketvar.h
index 6b79b59..96bccbf 100755
--- a/usrsctplib/user_socketvar.h
+++ b/usrsctplib/user_socketvar.h
@@ -42,7 +42,7 @@
 /* #include <sys/_lock.h>  was 0 byte file */
 /* #include <sys/_mutex.h> was 0 byte file */
 /* #include <sys/_sx.h> */ /*__Userspace__ alternative?*/
-#if !defined(__DragonFly__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(_WIN32) && !defined(__native_client__)
+#if !defined(__DragonFly__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(_WIN32) && !defined(__native_client__) && !defined(SCTP_USE_RTOS)
 #include <sys/uio.h>
 #endif
 #define SOCK_MAXADDRLEN 255
-- 
2.17.1

