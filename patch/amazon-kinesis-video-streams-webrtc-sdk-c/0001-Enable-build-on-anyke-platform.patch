From a026e46f50de09bb4fc9f29aba3fae128bc093bc Mon Sep 17 00:00:00 2001
From: Lina Chen <chenln1124@thundersoft.com>
Date: Fri, 17 Mar 2023 07:00:26 +0000
Subject: [PATCH 1/2] Enable build on anyke platform.

---
 CMakeLists.txt                   |  35 ++++++-----
 src/include/kvs/common.h         |   4 +-
 src/include/kvs/common_defs.h    |  10 +++
 src/source/api_call/list.h       |   2 +
 src/source/api_call/netio.c      |  34 ++++++++++
 src/source/crypto/crypto.h       |   8 +++
 src/source/crypto/dtls.h         |   7 +++
 src/source/crypto/dtls_mbedtls.c | 103 +++++++++++++++++++++++++++++++
 src/source/crypto/tls_mbedtls.c  |   4 ++
 src/source/net/network.c         |   6 +-
 src/source/signaling/signaling.h |   3 +
 src/source/srtp/srtp_session.h   |   2 +-
 src/source/utils/logger.c        |  20 +++++-
 src/source/utils/mutex.h         |   5 --
 src/source/utils/thread.c        |  49 ---------------
 src/source/utils/thread.h        |   5 --
 16 files changed, 217 insertions(+), 80 deletions(-)
 mode change 100644 => 100755 src/include/kvs/common.h
 mode change 100644 => 100755 src/source/api_call/list.h
 mode change 100644 => 100755 src/source/net/network.c
 mode change 100644 => 100755 src/source/signaling/signaling.h
 mode change 100644 => 100755 src/source/srtp/srtp_session.h
 mode change 100644 => 100755 src/source/utils/logger.c
 mode change 100644 => 100755 src/source/utils/mutex.h
 mode change 100644 => 100755 src/source/utils/thread.c
 mode change 100644 => 100755 src/source/utils/thread.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e1eec2377..91be83d31 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -29,10 +29,10 @@ option(MEMORY_SANITIZER "Build with MemorySanitizer." OFF)
 option(THREAD_SANITIZER "Build with ThreadSanitizer." OFF)
 option(UNDEFINED_BEHAVIOR_SANITIZER "Build with UndefinedBehaviorSanitizer." OFF)
 
-option(KVS_PLAT_ESP_FREERTOS "Build for ESP FreeRTOS" OFF)
+option(KVS_PLAT_ANKAI_FREERTOS "Build for ANKAI FreeRTOS" OFF)
 
-if(KVS_PLAT_ESP_FREERTOS)
-  add_definitions(-DKVS_PLAT_ESP_FREERTOS)
+if(KVS_PLAT_ANKAI_FREERTOS)
+  add_definitions(-DKVS_PLAT_ANKAI_FREERTOS)
 endif()
 
 if(NOT WIN32)
@@ -81,8 +81,8 @@ message(STATUS "Kinesis Video WebRTC Client path is ${KINESIS_VIDEO_WEBRTC_CLIEN
 message(STATUS "dependencies install path is ${OPEN_SRC_INSTALL_PREFIX}")
 
 # pass ca cert location to sdk
-add_definitions(-DKVS_CA_CERT_PATH="${CMAKE_SOURCE_DIR}/certs/cert.pem")
-add_definitions(-DCMAKE_DETECTED_CACERT_PATH)
+# add_definitions(-DKVS_CA_CERT_PATH="${CMAKE_SOURCE_DIR}/certs/cert.pem")
+# add_definitions(-DCMAKE_DETECTED_CACERT_PATH)
 
 if(USE_OPENSSL)
   add_definitions(-DKVS_USE_OPENSSL)
@@ -154,13 +154,13 @@ if (USE_OPENSSL)
   find_package(OpenSSL REQUIRED)
   set(OPEN_SRC_INCLUDE_DIRS ${OPEN_SRC_INCLUDE_DIRS} ${OPENSSL_INCLUDE_DIR})
 else()
-  if(NOT KVS_PLAT_ESP_FREERTOS)
+  if(NOT KVS_PLAT_ANKAI_FREERTOS)
     find_package(MbedTLS REQUIRED)
     set(OPEN_SRC_INCLUDE_DIRS ${OPEN_SRC_INCLUDE_DIRS} ${MBEDTLS_INCLUDE_DIRS})
   endif()
 endif()
 
-if (ENABLE_STREAMING AND NOT KVS_PLAT_ESP_FREERTOS)
+if (ENABLE_STREAMING AND NOT KVS_PLAT_ANKAI_FREERTOS)
   if (OPEN_SRC_INSTALL_PREFIX)
     find_library(LLHTTP_LIBRARIES llhttp REQUIRED PATHS ${OPEN_SRC_INSTALL_PREFIX})
   else()
@@ -168,7 +168,7 @@ if (ENABLE_STREAMING AND NOT KVS_PLAT_ESP_FREERTOS)
   endif()
 endif()
 
-if (ENABLE_STREAMING AND NOT KVS_PLAT_ESP_FREERTOS)
+if (ENABLE_STREAMING AND NOT KVS_PLAT_ANKAI_FREERTOS)
   if (OPEN_SRC_INSTALL_PREFIX)
     find_library(WSLAY_LIBRARIES wslay REQUIRED PATHS ${OPEN_SRC_INSTALL_PREFIX})
   else()
@@ -176,7 +176,7 @@ if (ENABLE_STREAMING AND NOT KVS_PLAT_ESP_FREERTOS)
   endif()
 endif()
 
-if (ENABLE_STREAMING AND NOT KVS_PLAT_ESP_FREERTOS)
+if (ENABLE_STREAMING AND NOT KVS_PLAT_ANKAI_FREERTOS)
   if (OPEN_SRC_INSTALL_PREFIX)
     find_library(SRTP_LIBRARIES srtp2 REQUIRED PATHS ${OPEN_SRC_INSTALL_PREFIX})
   else()
@@ -186,7 +186,7 @@ endif()
 
 if(ENABLE_DATA_CHANNEL)
   # usrsctp dont support pkgconfig yet
-  if(NOT KVS_PLAT_ESP_FREERTOS)
+  if(NOT KVS_PLAT_ANKAI_FREERTOS)
     find_library(
       Usrsctp
       NAMES ${USRSCTP_LIBNAME} usrsctp REQUIRED
@@ -322,10 +322,17 @@ include_directories(${KINESIS_VIDEO_WEBRTC_CLIENT_SRC}/src/include)
 
 add_library(kvsWebrtcStateMachine STATIC ${WEBRTC_STATE_MACHINE_SOURCE_FILES})
 target_link_libraries(kvsWebrtcStateMachine)
+if(KVS_PLAT_ANKAI_FREERTOS)
+  set(PLATFORM_LIBRARY_DIRS ${CMAKE_SOURCE_DIR}/../../os)
+  target_link_libraries(kvsWebrtcStateMachine PRIVATE ${PLATFORM_LIBRARY_DIRS}/libfreertos.a c)
+endif()
 
 add_library(kvsWebrtcUtils STATIC ${WEBRTC_UTILS_SOURCE_FILES})
 
 target_link_libraries(kvsWebrtcUtils ${CMAKE_THREAD_LIBS_INIT})
+if(KVS_PLAT_ANKAI_FREERTOS)
+  target_link_libraries(kvsWebrtcUtils PRIVATE ${PLATFORM_LIBRARY_DIRS}/libfreertos.a c)
+endif()
 
 if(UNIX AND NOT APPLE)
   # rt needed for clock_gettime
@@ -396,14 +403,14 @@ install(TARGETS kvsWebrtcClient
 )
 endif()
 
-install(TARGETS kvsWebrtcSignalingClient
+install(TARGETS kvsWebrtcSignalingClient kvsWebrtcUtils kvsWebrtcStateMachine
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
 )
 
-install(DIRECTORY ${KINESIS_VIDEO_WEBRTC_CLIENT_SRC}/src/include/
-  DESTINATION include
-)
+#install(DIRECTORY ${KINESIS_VIDEO_WEBRTC_CLIENT_SRC}/src/include/
+#  DESTINATION include
+#)
 
 if (BUILD_SAMPLE)
   file(COPY "${CMAKE_CURRENT_SOURCE_DIR}/samples/opusSampleFrames" DESTINATION .)
diff --git a/src/include/kvs/common.h b/src/include/kvs/common.h
old mode 100644
new mode 100755
index f524c1ddb..9c5e8d13a
--- a/src/include/kvs/common.h
+++ b/src/include/kvs/common.h
@@ -201,8 +201,8 @@ extern "C" {
 #ifdef CMAKE_DETECTED_CACERT_PATH
 #define DEFAULT_KVS_CACERT_PATH KVS_CA_CERT_PATH
 #else
-#ifdef KVS_PLAT_ESP_FREERTOS
-#define DEFAULT_KVS_CACERT_PATH "/sdcard/cert.pem"
+#ifdef KVS_PLAT_ANKAI_FREERTOS
+#define DEFAULT_KVS_CACERT_PATH "/mnt/cert.pem"
 #else
 #define DEFAULT_KVS_CACERT_PATH EMPTY_STRING
 #endif
diff --git a/src/include/kvs/common_defs.h b/src/include/kvs/common_defs.h
index b35de6090..a1fc89ef0 100755
--- a/src/include/kvs/common_defs.h
+++ b/src/include/kvs/common_defs.h
@@ -390,7 +390,11 @@ typedef INT_PTR SSIZE_T, *PSSIZE_T;
 #include <stdarg.h>
 #include <stdio.h>
 #include <sys/stat.h>
+#ifdef KVS_PLAT_ANKAI_FREERTOS
+#include "lwip/errno.h"
+#else
 #include <errno.h>
+#endif
 
 #include <ctype.h>
 #define TOLOWER    tolower
@@ -558,6 +562,12 @@ typedef struct stat STAT_STRUCT;
 #define FSCANF fscanf
 #endif
 
+#ifdef KVS_PLAT_ANKAI_FREERTOS
+#define select  lwip_select
+#define fcntl   lwip_fcntl
+#define close   lwip_close
+#endif
+
 #if defined _WIN32 || defined _WIN64 || defined __CYGWIN__
 #define FPATHSEPARATOR     '\\'
 #define FPATHSEPARATOR_STR "\\"
diff --git a/src/source/api_call/list.h b/src/source/api_call/list.h
old mode 100644
new mode 100755
index bd3e9f818..784e15fa4
--- a/src/source/api_call/list.h
+++ b/src/source/api_call/list.h
@@ -19,6 +19,8 @@
 #define _LINUX_LIST_H
 
 #include <stdio.h>
+
+#define typeof(x) __typeof__(x)
 /**
  * @name from other kernel headers
  */
diff --git a/src/source/api_call/netio.c b/src/source/api_call/netio.c
index 3ffbf9f9b..24cd05d7d 100755
--- a/src/source/api_call/netio.c
+++ b/src/source/api_call/netio.c
@@ -26,7 +26,9 @@
 //#include "azure_c_shared_utility/xlogging.h"
 #include "mbedtls/ctr_drbg.h"
 #include "mbedtls/entropy.h"
+#ifndef ENABLE_MBEDTLS_V3
 #include "mbedtls/net.h"
+#endif
 #include "mbedtls/net_sockets.h"
 
 /* Public headers */
@@ -78,6 +80,30 @@ static int prvCreateX509Cert(NetIo_t* pxNet)
     return xRes;
 }
 
+#ifdef ENABLE_MBEDTLS_V3
+static int mbedtls_test_rnd_std_rand( void *rng_state,
+                                      unsigned char *output,
+                                      size_t len )
+{
+#if !defined(__OpenBSD__) && !defined(__NetBSD__)
+    size_t i;
+
+    if( rng_state != NULL )
+        rng_state  = NULL;
+
+    for( i = 0; i < len; ++i )
+        output[i] = rand();
+#else
+    if( rng_state != NULL )
+        rng_state = NULL;
+
+    arc4random_buf( output, len );
+#endif /* !OpenBSD && !NetBSD */
+
+    return( 0 );
+}
+#endif
+
 static int prvInitConfig(NetIo_t* pxNet, const char* pcRootCA, const char* pcCert, const char* pcPrivKey, bool bFilePath)
 {
     int xRes = STATUS_SUCCESS;
@@ -98,12 +124,20 @@ static int prvInitConfig(NetIo_t* pxNet, const char* pcRootCA, const char* pcCer
                 if (bFilePath == false &&
                     (mbedtls_x509_crt_parse(pxNet->pRootCA, (void*) pcRootCA, strlen(pcRootCA) + 1) != 0 ||
                      mbedtls_x509_crt_parse(pxNet->pCert, (void*) pcCert, strlen(pcCert) + 1) != 0 ||
+#ifdef ENABLE_MBEDTLS_V3
+                     mbedtls_pk_parse_key(pxNet->pPrivKey, (void*) pcPrivKey, strlen(pcPrivKey) + 1, NULL, 0, mbedtls_test_rnd_std_rand, NULL) != 0)) {
+#else
                      mbedtls_pk_parse_key(pxNet->pPrivKey, (void*) pcPrivKey, strlen(pcPrivKey) + 1, NULL, 0) != 0)) {
+#endif
                     DLOGE("Failed to parse x509");
                     xRes = STATUS_NULL_ARG;
                 } else if (mbedtls_x509_crt_parse_file(pxNet->pRootCA, (void*) pcRootCA) != 0 ||
                            mbedtls_x509_crt_parse_file(pxNet->pCert, (void*) pcCert) != 0 ||
+#ifdef ENABLE_MBEDTLS_V3
+                           mbedtls_pk_parse_keyfile(pxNet->pPrivKey, (void*) pcPrivKey, NULL, mbedtls_test_rnd_std_rand, NULL) != 0) {
+#else
                            mbedtls_pk_parse_keyfile(pxNet->pPrivKey, (void*) pcPrivKey, NULL) != 0) {
+#endif
                 } else {
                     mbedtls_ssl_conf_authmode(&(pxNet->xConf), MBEDTLS_SSL_VERIFY_REQUIRED);
                     mbedtls_ssl_conf_ca_chain(&(pxNet->xConf), pxNet->pRootCA, NULL);
diff --git a/src/source/crypto/crypto.h b/src/source/crypto/crypto.h
index f8168e6ad..dacfb9663 100755
--- a/src/source/crypto/crypto.h
+++ b/src/source/crypto/crypto.h
@@ -30,6 +30,9 @@ extern "C" {
 #include <mbedtls/sha256.h>
 #include <mbedtls/md5.h>
 #include <mbedtls/error.h>
+#ifdef ENABLE_MBEDTLS_V3
+#include <mbedtls/compat-2.x.h>
+#endif
 #endif
 
 /******************************************************************************
@@ -87,8 +90,13 @@ typedef enum {
     } while (0)
 
 typedef enum {
+#ifdef ENABLE_MBEDTLS_V2_16_6
+    KVS_SRTP_PROFILE_AES128_CM_HMAC_SHA1_80 = MBEDTLS_SRTP_AES128_CM_HMAC_SHA1_80,
+    KVS_SRTP_PROFILE_AES128_CM_HMAC_SHA1_32 = MBEDTLS_SRTP_AES128_CM_HMAC_SHA1_32,
+#else
     KVS_SRTP_PROFILE_AES128_CM_HMAC_SHA1_80 = MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80,
     KVS_SRTP_PROFILE_AES128_CM_HMAC_SHA1_32 = MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32,
+#endif
 } KVS_SRTP_PROFILE;
 #else
 #error "A Crypto implementation is required."
diff --git a/src/source/crypto/dtls.h b/src/source/crypto/dtls.h
index ed1052ec2..f64aadd83 100644
--- a/src/source/crypto/dtls.h
+++ b/src/source/crypto/dtls.h
@@ -240,9 +240,16 @@ INT32 dtls_session_sendCallback(PVOID, const unsigned char*, ULONG);
 INT32 dtls_session_receiveCallback(PVOID, unsigned char*, ULONG);
 VOID dtls_session_setTimerCallback(PVOID, UINT32, UINT32);
 INT32 dtls_session_getTimerCallback(PVOID);
+#ifdef ENABLE_MBEDTLS_V3
+INT32 dtls_session_deriveKeyCallback(PVOID customData, mbedtls_ssl_key_export_type type,
+                                     const unsigned char* pMasterSecret,  size_t secret_len,
+                                     const unsigned char clientRandom[MAX_DTLS_RANDOM_BYTES_LEN],
+                                     const unsigned char serverRandom[MAX_DTLS_RANDOM_BYTES_LEN], mbedtls_tls_prf_types tlsProfile);
+#else
 INT32 dtls_session_deriveKeyCallback(PVOID, const unsigned char*, const unsigned char*, ULONG, ULONG, ULONG,
                                      const unsigned char[MAX_DTLS_RANDOM_BYTES_LEN], const unsigned char[MAX_DTLS_RANDOM_BYTES_LEN],
                                      mbedtls_tls_prf_types);
+#endif
 #else
 #error "A Crypto implementation is required."
 #endif
diff --git a/src/source/crypto/dtls_mbedtls.c b/src/source/crypto/dtls_mbedtls.c
index 28e5ef16e..1a43fbead 100755
--- a/src/source/crypto/dtls_mbedtls.c
+++ b/src/source/crypto/dtls_mbedtls.c
@@ -6,9 +6,14 @@
 
 /**  https://tools.ietf.org/html/rfc5764#section-4.1.2 */
 mbedtls_ssl_srtp_profile DTLS_SRTP_SUPPORTED_PROFILES[] = {
+#ifdef ENABLE_MBEDTLS_V2_16_6
+    MBEDTLS_SRTP_AES128_CM_HMAC_SHA1_80,
+    MBEDTLS_SRTP_AES128_CM_HMAC_SHA1_32,
+#else
     MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80,
     MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_32,
     MBEDTLS_TLS_SRTP_UNSET,
+#endif
 };
 
 #ifdef MBEDTLS_DEBUG_LOG
@@ -44,6 +49,10 @@ STATUS dtls_session_create(PDtlsSessionCallbacks pDtlsSessionCallbacks, TIMER_QU
     mbedtls_debug_set_threshold(1);
     mbedtls_ssl_conf_dbg(&pDtlsSession->sslCtxConfig, ssl_debug, NULL);
 #endif
+
+#ifdef ENABLE_MBEDTLS_V3
+    mbedtls_ctr_drbg_set_prediction_resistance(&pDtlsSession->ctrDrbg, MBEDTLS_CTR_DRBG_PR_ON);
+#endif
     CHK(mbedtls_ctr_drbg_seed(&pDtlsSession->ctrDrbg, mbedtls_entropy_func, &pDtlsSession->entropy, NULL, 0) == 0, STATUS_DTLS_CREATE_SSL_FAILED);
 
     CHK_STATUS(io_buffer_create(DEFAULT_MTU_SIZE, &pDtlsSession->pReadBuffer));
@@ -244,6 +253,25 @@ CleanUp:
     return retStatus;
 }
 
+
+#ifdef ENABLE_MBEDTLS_V3
+INT32 dtls_session_deriveKeyCallback(PVOID customData, mbedtls_ssl_key_export_type type,
+		                     const unsigned char* pMasterSecret,  size_t secret_len,
+				     const unsigned char clientRandom[MAX_DTLS_RANDOM_BYTES_LEN],
+                                     const unsigned char serverRandom[MAX_DTLS_RANDOM_BYTES_LEN], mbedtls_tls_prf_types tlsProfile)
+{
+    ENTERS();
+    UNUSED_PARAM(secret_len);
+    PDtlsSession pDtlsSession = (PDtlsSession) customData;
+    PTlsKeys pKeys = &pDtlsSession->tlsKeys;
+    MEMCPY(pKeys->masterSecret, pMasterSecret, SIZEOF(pKeys->masterSecret));
+    MEMCPY(pKeys->randBytes, clientRandom, MAX_DTLS_RANDOM_BYTES_LEN);
+    MEMCPY(pKeys->randBytes + MAX_DTLS_RANDOM_BYTES_LEN, serverRandom, MAX_DTLS_RANDOM_BYTES_LEN);
+    pKeys->tlsProfile = tlsProfile;
+    LEAVES();
+    return 0;
+}
+#else
 INT32 dtls_session_deriveKeyCallback(PVOID customData, const unsigned char* pMasterSecret, const unsigned char* pKeyBlock, ULONG maclen, ULONG keylen,
                                      ULONG ivlen, const unsigned char clientRandom[MAX_DTLS_RANDOM_BYTES_LEN],
                                      const unsigned char serverRandom[MAX_DTLS_RANDOM_BYTES_LEN], mbedtls_tls_prf_types tlsProfile)
@@ -262,6 +290,7 @@ INT32 dtls_session_deriveKeyCallback(PVOID customData, const unsigned char* pMas
     LEAVES();
     return 0;
 }
+#endif
 
 STATUS dtls_session_start(PDtlsSession pDtlsSession, BOOL isServer)
 {
@@ -295,8 +324,18 @@ STATUS dtls_session_start(PDtlsSession pDtlsSession, BOOL isServer)
         CHK(mbedtls_ssl_conf_own_cert(&pDtlsSession->sslCtxConfig, &pCertInfo->cert, &pCertInfo->privateKey) == 0, STATUS_DTLS_CREATE_SSL_FAILED);
     }
     mbedtls_ssl_conf_dtls_cookies(&pDtlsSession->sslCtxConfig, NULL, NULL, NULL);
+#ifdef ENABLE_MBEDTLS_V2_16_6
+    CHK(mbedtls_ssl_conf_dtls_srtp_protection_profiles(&pDtlsSession->sslCtxConfig, DTLS_SRTP_SUPPORTED_PROFILES,
+                                                       ARRAY_SIZE(DTLS_SRTP_SUPPORTED_PROFILES)) == 0,
+        STATUS_DTLS_CREATE_SSL_FAILED);
+#else
     CHK(mbedtls_ssl_conf_dtls_srtp_protection_profiles(&pDtlsSession->sslCtxConfig, DTLS_SRTP_SUPPORTED_PROFILES) == 0, STATUS_DTLS_CREATE_SSL_FAILED);
+#endif
+#ifdef ENABLE_MBEDTLS_V3
+    mbedtls_ssl_set_export_keys_cb(&pDtlsSession->sslCtx, (mbedtls_ssl_export_keys_t *)dtls_session_deriveKeyCallback, pDtlsSession);
+#else
     mbedtls_ssl_conf_export_keys_ext_cb(&pDtlsSession->sslCtxConfig, (mbedtls_ssl_export_keys_ext_t*) dtls_session_deriveKeyCallback, pDtlsSession);
+#endif
 
     CHK(mbedtls_ssl_setup(&pDtlsSession->sslCtx, &pDtlsSession->sslCtxConfig) == 0, STATUS_DTLS_SSL_CTX_CREATION_FAILED);
     mbedtls_ssl_set_mtu(&pDtlsSession->sslCtx, DEFAULT_MTU_SIZE);
@@ -374,7 +413,11 @@ STATUS dtls_session_read(PDtlsSession pDtlsSession, PBYTE pData, PINT32 pDataLen
         }
     }
 
+#ifdef ENABLE_MBEDTLS_V3
+    if (pDtlsSession->sslCtx.MBEDTLS_PRIVATE(state) == MBEDTLS_SSL_HANDSHAKE_OVER) {
+#else
     if (pDtlsSession->sslCtx.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
+#endif
         CHK_STATUS(dtls_session_changeState(pDtlsSession, RTC_DTLS_TRANSPORT_STATE_CONNECTED));
     }
 
@@ -491,7 +534,11 @@ STATUS dtls_session_populateKeyingMaterial(PDtlsSession pDtlsSession, PDtlsKeyin
     BOOL locked = FALSE;
     PTlsKeys pKeys;
     BYTE keyingMaterialBuffer[MAX_SRTP_MASTER_KEY_LEN * 2 + MAX_SRTP_SALT_KEY_LEN * 2];
+#ifdef ENABLE_MBEDTLS_V2_16_6
+    mbedtls_ssl_srtp_profile negotiatedSRTPProfile;
+#else
     mbedtls_dtls_srtp_info negotiatedSRTPProfile;
+#endif
 
     CHK(pDtlsSession != NULL && pDtlsKeyingMaterial != NULL, STATUS_DTLS_NULL_ARG);
     pKeys = &pDtlsSession->tlsKeys;
@@ -516,8 +563,25 @@ STATUS dtls_session_populateKeyingMaterial(PDtlsSession pDtlsSession, PDtlsKeyin
 
     MEMCPY(pDtlsKeyingMaterial->serverWriteKey + MAX_SRTP_MASTER_KEY_LEN, &keyingMaterialBuffer[offset], MAX_SRTP_SALT_KEY_LEN);
 
+#ifdef ENABLE_MBEDTLS_V2_16_6
+    negotiatedSRTPProfile = mbedtls_ssl_get_dtls_srtp_protection_profile(&pDtlsSession->sslCtx);
+    switch (negotiatedSRTPProfile) {
+        case MBEDTLS_SRTP_AES128_CM_HMAC_SHA1_80:
+            pDtlsKeyingMaterial->srtpProfile = KVS_SRTP_PROFILE_AES128_CM_HMAC_SHA1_80;
+            break;
+        case MBEDTLS_SRTP_AES128_CM_HMAC_SHA1_32:
+            pDtlsKeyingMaterial->srtpProfile = KVS_SRTP_PROFILE_AES128_CM_HMAC_SHA1_32;
+            break;
+        default:
+            CHK(FALSE, STATUS_DTLS_UNKNOWN_SRTP_PROFILE);
+    }
+#else
     mbedtls_ssl_get_dtls_srtp_negotiation_result(&pDtlsSession->sslCtx, &negotiatedSRTPProfile);
+#ifdef ENABLE_MBEDTLS_V3
+	switch (negotiatedSRTPProfile.MBEDTLS_PRIVATE(chosen_dtls_srtp_profile)) {
+#else
     switch (negotiatedSRTPProfile.chosen_dtls_srtp_profile) {
+#endif
         case MBEDTLS_TLS_SRTP_AES128_CM_HMAC_SHA1_80:
             pDtlsKeyingMaterial->srtpProfile = KVS_SRTP_PROFILE_AES128_CM_HMAC_SHA1_80;
             break;
@@ -527,6 +591,7 @@ STATUS dtls_session_populateKeyingMaterial(PDtlsSession pDtlsSession, PDtlsKeyin
         default:
             CHK(FALSE, STATUS_DTLS_UNKNOWN_SRTP_PROFILE);
     }
+#endif
 
 CleanUp:
     if (locked) {
@@ -566,6 +631,30 @@ CleanUp:
     return retStatus;
 }
 
+#ifdef ENABLE_MBEDTLS_V3
+static int mbedtls_test_rnd_std_rand( void *rng_state,
+                                      unsigned char *output,
+                                      size_t len )
+{
+#if !defined(__OpenBSD__) && !defined(__NetBSD__)
+    size_t i;
+
+    if( rng_state != NULL )
+        rng_state  = NULL;
+
+    for( i = 0; i < len; ++i )
+        output[i] = rand();
+#else
+    if( rng_state != NULL )
+        rng_state = NULL;
+
+    arc4random_buf( output, len );
+#endif /* !OpenBSD && !NetBSD */
+
+    return( 0 );
+}
+#endif
+
 STATUS certificate_key_copy(mbedtls_x509_crt* pCert, mbedtls_pk_context* pKey, PDtlsSessionCertificateInfo pDst)
 {
     ENTERS();
@@ -574,14 +663,22 @@ STATUS certificate_key_copy(mbedtls_x509_crt* pCert, mbedtls_pk_context* pKey, P
     mbedtls_ecp_keypair *pSrcECP, *pDstECP;
 
     CHK(pCert != NULL && pKey != NULL && pDst != NULL, STATUS_DTLS_NULL_ARG);
+#ifdef ENABLE_MBEDTLS_V3
+    CHK(mbedtls_pk_check_pair(&pCert->pk, pKey, mbedtls_test_rnd_std_rand, NULL) == 0, STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
+#else
     CHK(mbedtls_pk_check_pair(&pCert->pk, pKey) == 0, STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
+#endif
 
     mbedtls_x509_crt_init(&pDst->cert);
     mbedtls_pk_init(&pDst->privateKey);
     initialized = TRUE;
 
     CHK(mbedtls_x509_crt_parse_der(&pDst->cert, pCert->raw.p, pCert->raw.len) == 0, STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
+#ifdef ENABLE_MBEDTLS_V3
+    CHK(mbedtls_pk_setup(&pDst->privateKey, pKey->MBEDTLS_PRIVATE(pk_info)) == 0, STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
+#else
     CHK(mbedtls_pk_setup(&pDst->privateKey, pKey->pk_info) == 0, STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
+#endif
 
     switch (mbedtls_pk_get_type(pKey)) {
         case MBEDTLS_PK_RSA:
@@ -591,9 +688,15 @@ STATUS certificate_key_copy(mbedtls_x509_crt* pCert, mbedtls_pk_context* pKey, P
         case MBEDTLS_PK_ECDSA:
             pSrcECP = mbedtls_pk_ec(*pKey);
             pDstECP = mbedtls_pk_ec(pDst->privateKey);
+#ifdef ENABLE_MBEDTLS_V3
+            CHK(mbedtls_ecp_group_copy(&pDstECP->MBEDTLS_PRIVATE(grp), &pSrcECP->MBEDTLS_PRIVATE(grp)) == 0 && mbedtls_ecp_copy(&pDstECP->MBEDTLS_PRIVATE(Q), &pSrcECP->MBEDTLS_PRIVATE(Q)) == 0 &&
+                    mbedtls_mpi_copy(&pDstECP->MBEDTLS_PRIVATE(d), &pSrcECP->MBEDTLS_PRIVATE(d)) == 0,
+                STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
+#else
             CHK(mbedtls_ecp_group_copy(&pDstECP->grp, &pSrcECP->grp) == 0 && mbedtls_ecp_copy(&pDstECP->Q, &pSrcECP->Q) == 0 &&
                     mbedtls_mpi_copy(&pDstECP->d, &pSrcECP->d) == 0,
                 STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
+#endif
             break;
         default:
             CHK(FALSE, STATUS_DTLS_CERTIFICATE_GENERATION_FAILED);
diff --git a/src/source/crypto/tls_mbedtls.c b/src/source/crypto/tls_mbedtls.c
index f6046338b..ac6327492 100755
--- a/src/source/crypto/tls_mbedtls.c
+++ b/src/source/crypto/tls_mbedtls.c
@@ -189,7 +189,11 @@ STATUS tls_session_read(PTlsSession pTlsSession, PBYTE pData, UINT32 bufferLen,
         }
     }
 
+#ifdef ENABLE_MBEDTLS_V3
+    if (pTlsSession->sslCtx.MBEDTLS_PRIVATE(state) == MBEDTLS_SSL_HANDSHAKE_OVER) {
+#else
     if (pTlsSession->sslCtx.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
+#endif
         tls_session_changeState(pTlsSession, TLS_SESSION_STATE_CONNECTED);
     }
 
diff --git a/src/source/net/network.c b/src/source/net/network.c
old mode 100644
new mode 100755
index f105aa12b..03d8358bc
--- a/src/source/net/network.c
+++ b/src/source/net/network.c
@@ -151,11 +151,11 @@ STATUS net_getLocalhostIpAddresses(PKvsIpAddress destIpList, PUINT32 pDestIpList
     }
 #else
     //#error "need to add the network interface."
-    extern char* esp_get_ip(void);
+    extern char* app_get_ip(void);
     destIpList[ipCount].isPointToPoint = 0;
     destIpList[ipCount].family = KVS_IP_FAMILY_TYPE_IPV4;
     destIpList[ipCount].port = 0;
-    MEMCPY(destIpList[ipCount].address, esp_get_ip(), IPV4_ADDRESS_LENGTH);
+    MEMCPY(destIpList[ipCount].address, app_get_ip(), IPV4_ADDRESS_LENGTH);
     DLOGD("Acquried IP: %d.%d.%d.%d", destIpList[ipCount].address[0], destIpList[ipCount].address[1], destIpList[ipCount].address[2],
           destIpList[ipCount].address[3]);
     ipCount++;
@@ -492,7 +492,7 @@ PCHAR net_getErrorString(INT32 error)
 }
 #endif
 
-#ifdef KVS_PLAT_ESP_FREERTOS
+#ifdef KVS_PLAT_ANKAI_FREERTOS
 PCHAR net_getGaiStrRrror(INT32 error)
 {
     return "gai_strerror(errCode) not supported.";
diff --git a/src/source/signaling/signaling.h b/src/source/signaling/signaling.h
old mode 100644
new mode 100755
index 037354fa7..940b41ac6
--- a/src/source/signaling/signaling.h
+++ b/src/source/signaling/signaling.h
@@ -29,6 +29,9 @@ extern "C" {
 #include "channel_info.h"
 #include "timer_queue.h"
 
+#include "FreeRTOS.h"
+#include "queue.h"
+
 /******************************************************************************
  * DEFINITION
  ******************************************************************************/
diff --git a/src/source/srtp/srtp_session.h b/src/source/srtp/srtp_session.h
old mode 100644
new mode 100755
index cc31bf709..efe0ce41b
--- a/src/source/srtp/srtp_session.h
+++ b/src/source/srtp/srtp_session.h
@@ -28,7 +28,7 @@ extern "C" {
 #include "kvs/platform_utils.h"
 #include "crypto.h"
 #ifdef ENABLE_STREAMING
-#ifdef KVS_PLAT_ESP_FREERTOS
+#ifdef KVS_PLAT_ANKAI_FREERTOS
 #include <srtp.h>
 #else
 #include <srtp2/srtp.h>
diff --git a/src/source/utils/logger.c b/src/source/utils/logger.c
old mode 100644
new mode 100755
index 2af8a3c69..a1ecee067
--- a/src/source/utils/logger.c
+++ b/src/source/utils/logger.c
@@ -48,6 +48,7 @@ VOID addLogMetadata(PCHAR buffer, UINT32 bufferLen, PCHAR fmt, UINT32 logLevel)
     CHAR timeString[MAX_TIMESTAMP_FORMAT_STR_LEN + 1 + 1];
     STATUS retStatus = STATUS_SUCCESS;
     UINT32 offset = 0;
+
 #if 0
 #ifdef ENABLE_LOG_THREAD_ID
     // MAX_THREAD_ID_STR_LEN + null
@@ -67,7 +68,10 @@ VOID addLogMetadata(PCHAR buffer, UINT32 bufferLen, PCHAR fmt, UINT32 logLevel)
 #ifdef ENABLE_LOG_THREAD_ID
     offset += SNPRINTF(buffer + offset, bufferLen - offset, "%s ", tidString);
 #endif
+#else
+    offset = (UINT32) SNPRINTF(buffer, bufferLen, "[%-*s] ", MAX_LOG_LEVEL_STRLEN, getLogLevelStr(logLevel));
 #endif
+
     SNPRINTF(buffer + offset, bufferLen - offset, "%s\n", fmt);
 }
 
@@ -81,6 +85,7 @@ VOID defaultLogPrint(UINT32 level, PCHAR tag, PCHAR fmt, ...)
 {
     PCHAR logFmtString = MEMALLOC(MAX_LOG_FORMAT_LENGTH + 1);
     UINT32 logLevel = GET_LOGGER_LOG_LEVEL();
+    int slen;
 
     UNUSED_PARAM(tag);
 
@@ -98,9 +103,22 @@ VOID defaultLogPrint(UINT32 level, PCHAR tag, PCHAR fmt, ...)
 
         va_list valist;
         va_start(valist, fmt);
-        vprintf(logFmtString, valist);
+        vsnprintf(logFmtString, MAX_LOG_FORMAT_LENGTH, fmt, valist);
         va_end(valist);
+
+        slen = strlen(logFmtString);
+        for(int i = 0; i < slen; i++)
+        {
+            if(logFmtString[i] == '\n')
+            {
+                putch('\r');
+            }
+            putch(logFmtString[i]);
+        }
+        putch('\n');
+        putch('\r');
     }
+
     MEMFREE(logFmtString);
     MUTEX_UNLOCK(logLock);
 }
diff --git a/src/source/utils/mutex.h b/src/source/utils/mutex.h
old mode 100644
new mode 100755
index 0859000e4..874e19005
--- a/src/source/utils/mutex.h
+++ b/src/source/utils/mutex.h
@@ -56,11 +56,6 @@ typedef PCONDITION_VARIABLE CVAR;
 #else
 #include <pthread.h>
 #include <signal.h>
-#if defined(KVS_PLAT_ESP_FREERTOS)
-#include <esp_pthread.h>
-#include "esp_heap_caps.h"
-#include "esp_system.h"
-#endif
 typedef pthread_cond_t* CVAR;
 #endif
 
diff --git a/src/source/utils/thread.c b/src/source/utils/thread.c
old mode 100644
new mode 100755
index 4b0205652..c1febdd67
--- a/src/source/utils/thread.c
+++ b/src/source/utils/thread.c
@@ -204,57 +204,8 @@ PUBLIC_API STATUS defaultCreateThreadEx(PTID pThreadId, PCHAR threadName, UINT32
     CHK_ERR(result == 0, STATUS_THREAD_ATTR_SET_STACK_SIZE_FAILED, "pthread_attr_setstacksize failed with %d", result);
 #endif
 
-#if defined(KVS_PLAT_ESP_FREERTOS)
-    UINT32 totalSize = esp_get_free_heap_size();
-    UINT32 spiSize = heap_caps_get_free_size(MALLOC_CAP_SPIRAM);
-    UINT32 internalSize = heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
-
-    esp_pthread_cfg_t pthread_cfg;
-    esp_err_t esp_err = esp_pthread_get_cfg(&pthread_cfg);
-    if (esp_err != ESP_OK) {
-        DLOGW("get the esp pthread cfg failed.");
-    }
-
-    if (threadSize == 0) {
-        pthread_cfg.stack_size = DEFAULT_THREAD_SIZE;
-    } else {
-        pthread_cfg.stack_size = threadSize;
-    }
-
-    if (threadName == NULL) {
-        pthread_cfg.thread_name = DEFAULT_THREAD_NAME;
-    } else {
-        pthread_cfg.thread_name = threadName;
-    }
-
-    esp_err = esp_pthread_set_cfg(&pthread_cfg);
-
-    if (esp_err != ESP_OK) {
-        DLOGW("set the esp pthread cfg failed.");
-    }
-
-    if (joinable == TRUE) {
-        pthread_attr_setdetachstate(pAttr, PTHREAD_CREATE_JOINABLE);
-    } else {
-        pthread_attr_setdetachstate(pAttr, PTHREAD_CREATE_DETACHED);
-    }
-
-    if (threadSize == 0) {
-        pthread_attr_setstacksize(pAttr, DEFAULT_THREAD_SIZE);
-    } else {
-        pthread_attr_setstacksize(pAttr, threadSize);
-    }
-#endif
-
     result = pthread_create(&threadId, pAttr, start, args);
 
-#if defined(KVS_PLAT_ESP_FREERTOS)
-    UINT32 curTotalSize = esp_get_free_heap_size();
-    UINT32 curSpiSize = heap_caps_get_free_size(MALLOC_CAP_SPIRAM);
-    UINT32 curInternalSize = heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
-    DLOGD("pthread:%s, size:%d requires ram, totalSize:%d, spiSize:%d, internalSize:%d", threadName, threadSize, totalSize - curTotalSize,
-          spiSize - curSpiSize, internalSize - curInternalSize);
-#endif
     switch (result) {
         case 0:
             // Successful case
diff --git a/src/source/utils/thread.h b/src/source/utils/thread.h
old mode 100644
new mode 100755
index 23e38a0da..01c20edb0
--- a/src/source/utils/thread.h
+++ b/src/source/utils/thread.h
@@ -21,11 +21,6 @@ extern "C" {
 // thread stack size to use when running on constrained device like raspberry pi
 #define THREAD_STACK_SIZE_ON_CONSTRAINED_DEVICE (512 * 1024)
 
-#if defined(KVS_PLAT_ESP_FREERTOS)
-#define DEFAULT_THREAD_SIZE 4096
-#define DEFAULT_THREAD_NAME "pthread"
-#endif
-
 // Max thread name buffer length - similar to Linux platforms
 #ifndef MAX_THREAD_NAME
 #define MAX_THREAD_NAME 16
-- 
2.17.1

